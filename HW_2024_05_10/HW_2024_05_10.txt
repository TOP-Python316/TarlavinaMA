1.
Для ПО ресторана нужно разработать модуль, помогающий контролировать использование фруктов и овощей на кухне.
Создайте абстрактный класс Ingredient с методами get_name() и get_quantity().
Затем создайте два подкласса Vegetable и Fruit, 
которые наследуют абстрактные методы от Ingredient и реализуют свои собственные версии методов get_name() и get_quantity().


Пример использования:
carrot = Vegetable("Морковь", 5)
apple = Fruit("Яблоки", 10)

print(carrot.get_name())
print(carrot.get_quantity())

print(apple.get_name())
print(apple.get_quantity())


Вывод:
Морковь
5 кг
Яблоки
10 кг





2.
Палеонтологам, работающим в заповеднике для динозавров,
понадобилось ПО для отслеживания множества травоядных и плотоядных подопечных.
Данные, которые нужно учитывать по каждому динозавру – имя, вид, рост, вес и рацион питания.

Создайте абстрактный класс Dinosaur с методами:
    get_personal_name(),
    get_breed(),
    get_height(),
    get_weight(),
    get_diet().

Затем создайте два подкласса Carnivore (плотоядный) и Herbivore (травоядный),
которые наследуют методы Dinosaur и реализуют свои собственные версии
    get_personal_name(), 
    get_breed(), 
    get_height(), 
    get_weight(),
    get_diet().

Кроме того, создайте класс DinosaurPark,
который содержит список динозавров и имеет методы:
    list_dinosaurs(), 
    list_carnivores()
    list_herbivores()
для вывода списков:
    всех динозавров, 
    плотоядных
    травоядных особей.


Пример использования:
t_rex = Carnivore('Тираннозавр', 'Рекс', 4800, 560)
velociraptor = Carnivore('Велоцираптор', 'Зубастик', 30, 70)
stegosaurus = Herbivore('Стегозавр', 'Стегга', 7100, 420)
triceratops = Herbivore('Трицератопс', 'Трипси', 8000, 290)

park = DinosaurPark()

park.add_dinosaur(t_rex)
park.add_dinosaur(velociraptor)
park.add_dinosaur(stegosaurus)
park.add_dinosaur(triceratops)


for dinosaur in park.list_dinosaurs():
    print(f'Имя: {dinosaur[0]}\n'
    f'Вид: {dinosaur[1]}\n'
    f'Вес: {dinosaur[2]} кг\n'
    f'Рост: {dinosaur[3]} см\n'
    f'Рацион: {dinosaur[4]}\n')


Вывод:
Имя: Рекс
Вид: Тираннозавр
Вес: 4800 кг
Рост: 560 см
Рацион: Плотоядный

Имя: Зубастик
Вид: Велоцираптор
Вес: 30 кг
Рост: 70 см
Рацион: Плотоядный

Имя: Стегга
Вид: Стегозавр
Вес: 7100 кг
Рост: 420 см
Рацион: Травоядный

Имя: Трипси
Вид: Трицератопс
Вес: 8000 кг
Рост: 290 см
Рацион: Травоядный





3.
Напишите класс FilmCatalogue (каталог фильмов), который отвечает за ведение фильмотеки.
FilmCatalogue должен поддерживать различные типы кинокартин, чтобы пользователи могли искать фильмы по определенному жанру.
Для этого необходимо создать новые классы для различных жанров (например, Horror, Action, Romance),
которые наследуют класс Movie и переопределяют метод play() для вывода информации о том, к какому жанру относится фильм.


Пример использования:
my_catalogue = FilmCatalogue()

my_catalogue.add_movie(Drama("Крестный отец", "Френсис Ф. Коппола"))
my_catalogue.add_movie(Comedy("Ночные игры", "Джон Фрэнсис Дейли, Джонатан М. Голдштейн"))
my_catalogue.add_movie(Horror("Дракула Брэма Стокера", "Френсис Ф. Коппола"))
my_catalogue.add_movie(Action("Крушение", "Жан-Франсуа Рише"))
my_catalogue.add_movie(Romance("Честная куртизанка", "Маршалл Херсковиц"))

my_catalogue.play_all_movies()

print(f"\nНайдены фильмы ужасов:")
for movie in my_catalogue.search_movies_by_genre(Horror):
    print(movie.title)

print(f"\nЗапускаем фильм из жанра 'Мелодрамы':")
my_catalogue.play_movies_by_genre(Romance)


Вывод:
Включаем драму 'Крестный отец' реж. Френсис Ф. Коппола.
Включаем комедию 'Ночные игры' реж. Джон Фрэнсис Дейли, Джонатан М. Голдштейн.
Включаем фильм ужасов 'Дракула Брэма Стокера' реж. Френсис Ф. Коппола.
Включаем боевик 'Крушение' реж. Жан-Франсуа Рише.
Включаем мелодраму 'Честная куртизанка' реж. Маршалл Херсковиц.

Найдены фильмы ужасов:
Дракула Брэма Стокера

Запускаем фильм из жанра 'Мелодрамы':
Включаем мелодраму 'Честная куртизанка' реж. Маршалл Херсковиц.